Create a responsive, interactive Reaction Speed Test web application that measures how quickly a user can respond to a visual cue. The application should be visually appealing, intuitive to use, and include a range of features to make it engaging and replayable. The project should be built using HTML, CSS (preferably Tailwind or a clean utility-based approach), and JavaScript or a JavaScript framework of your choice. All data can be handled locally using browser APIs (e.g., localStorage).

Here are the complete features and requirements for the application:

Core Game Functionality:

The game starts with a countdown overlay (3, 2, 1).

After a random delay (between 1-5 seconds), a target element appears (e.g., a circle or button).

The user must click it as quickly as possible once it appears.

Measure the reaction time in milliseconds and display it immediately.

If the user clicks too early, show a “Too Soon” message and reset the round.

Score Tracking:

Store and display the user's best score (fastest reaction time).

Highlight a new personal best with a tag or small animation.

Include a list of the last 5 to 10 reaction times with timestamps.

Display a small chart or graph (optional) to visualize score trends.

Ghost Replay Feature:

In the next round, show a subtle visual indicator (e.g., a ghost ring or timer bar) to indicate when the previous best click happened. This helps the user aim to beat their own time.

Leaderboard:

Create a simple local leaderboard that stores usernames and best times.

Allow users to enter a name before starting the game or in a settings section.

Achievements:

Add unlockable badges such as “Under 200ms”, “5 Games in a Row”, “New Record”.

Display these badges with a small animation or label when unlocked.

Interface and Design:

Use a clean, modern, responsive layout that adjusts for desktop, tablet, and mobile views.

Include a dark/light mode toggle that works and saves user preference using localStorage.

Add a sound toggle in a settings panel to turn on/off feedback sounds.

Use smooth animations and transitions to enhance user experience.

Play With Friends (Phase 1):

Generate a challenge link or code that allows a friend to play separately and compare scores.

For now, this can be stored and shown locally (no backend required).

Additional UI Components:

Toast messages for feedback such as “Too Soon”, “New Record”, etc.

Modal or drawer for settings (theme, sound, reset, username).

Confetti or celebratory animation on new high scores.

Accessibility and Usability:

Use accessible HTML elements and aria labels where needed.

Ensure all interactive elements are keyboard-navigable.

Code Structure:

Use modular code with clear separation between logic, UI, and data.

Organize code in components if using a framework (e.g., React or Vue).

Add comments where appropriate to make the codebase understandable.

The application should run completely in the browser without a backend. The goal is to make the user interface fun, clean, and addictive so users want to play repeatedly. All state should persist using localStorage or in-memory JavaScript structures.